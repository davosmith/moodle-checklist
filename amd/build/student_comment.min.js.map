{"version":3,"sources":["../src/student_comment.js"],"names":["define","$","Ajax","Notification","String","init","cmid","comments","Y","log","currentComments","i","comment","value","addEventListener","e","target","classString","classList","checklistitemid","substr","lastIndexOf","length","spinner","css","args","call","methodname","done","data","addNotification","message","get_string","type","fail","exception"],"mappings":"AAqBAA,OAAM,iCAAC,CAAC,QAAD,CAAW,WAAX,CAAwB,mBAAxB,CAA6C,UAA7C,CAAD,CAA2D,SAASC,CAAT,CAAYC,CAAZ,CAAkBC,CAAlB,CAAgCC,CAAhC,CAAwC,CACrG,MAAO,CACHC,IAAI,CAAE,cAASC,CAAT,CAAe,IAEbC,CAAAA,CAAQ,CAAGN,CAAC,CAAC,sBAAD,CAFC,CAIjBO,CAAC,CAACC,GAAF,CAAM,SAAWH,CAAjB,EAGA,OADII,CAAAA,CAAe,CAAG,EACtB,YAASC,CAAT,EACI,GAAIC,CAAAA,CAAO,CAAGL,CAAQ,CAACI,CAAD,CAAtB,CACAD,CAAe,CAACC,CAAD,CAAf,CAAqBC,CAAO,CAACC,KAA7B,CACAD,CAAO,CAACE,gBAAR,CAAyB,MAAzB,CAAiC,SAASC,CAAT,CAAY,CAEzC,GAAIL,CAAe,CAACC,CAAD,CAAf,GAAuBI,CAAC,CAACC,MAAF,CAASH,KAApC,CAA2C,CACvCL,CAAC,CAACC,GAAF,CAAM,uEAAyEM,CAAC,CAACC,MAAF,CAASH,KAAxF,CACH,CAFD,IAEO,CACHL,CAAC,CAACC,GAAF,CAAM,wCAAN,EADG,GAECQ,CAAAA,CAAW,CAAGF,CAAC,CAACC,MAAF,CAASE,SAAT,CAAmB,CAAnB,CAFf,CAICC,CAAe,CAAGF,CAAW,CAACG,MAAZ,CAAmBH,CAAW,CAACI,WAAZ,qBAAuC,mBAAYC,MAAtE,CAJnB,CAMCC,CAAO,CAAG,kCAAoCJ,CAN/C,CAOHlB,CAAC,CAACsB,CAAD,CAAD,CAAWC,GAAX,CAAe,SAAf,CAA0B,cAA1B,EAPG,GASCC,CAAAA,CAAI,CAAG,CACL,QAAW,CACP,YAAeV,CAAC,CAACC,MAAF,CAASH,KADjB,CAEP,gBAAmBM,CAFZ,CAGP,KAAQb,CAHD,CADN,CATR,CAqBHJ,CAAI,CAACwB,IAAL,CAAU,CAJI,CACVC,UAAU,CAAE,sCADF,CAEVF,IAAI,CAAEA,CAFI,CAIJ,CAAV,EAAqB,CAArB,EAAwBG,IAAxB,CAA6B,SAASC,CAAT,CAAe,CACxC5B,CAAC,CAACsB,CAAD,CAAD,CAAWC,GAAX,CAAe,SAAf,CAA0B,MAA1B,EACA,GAAI,KAAAK,CAAJ,CAAmB,CACfrB,CAAC,CAACC,GAAF,CAAM,+BAAN,EACAC,CAAe,CAACC,CAAD,CAAf,CAAqBI,CAAC,CAACC,MAAF,CAASH,KACjC,CAHD,IAGO,CACHV,CAAY,CAAC2B,eAAb,CAA6B,CACzBC,OAAO,CAAE3B,CAAM,CAAC4B,UAAP,CAAkB,+BAAlB,CAAmD,eAAnD,CADgB,CAEzBC,IAAI,CAAE,OAFmB,CAA7B,CAIH,CACJ,CAXD,EAWGC,IAXH,CAWQ/B,CAAY,CAACgC,SAXrB,CAYH,CACJ,CAtCD,CAHJ,EAASxB,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,CAAQ,CAACe,MAA7B,CAAqCX,CAAC,EAAI,CAA1C,CAA6C,GAApCA,CAAoC,CA0C5C,CACJ,CAnDE,CAqDV,CAtDK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Push student comments to checklist plugin via ajax.\n *\n * @module     mod_checklist/student_comments\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/ajax', 'core/notification', 'core/str'], function($, Ajax, Notification, String) {\n    return {\n        init: function(cmid) {\n            const classPrefix = 'studentcommentid';\n            let comments = $('.studentcommentinput');\n\n            Y.log('cmid: ' + cmid);\n            // Store the initial state of each comment. Only want to update server if comment changed on blur.\n            let currentComments = [];\n            for (let i = 0; i < comments.length; i += 1) {\n                let comment = comments[i];\n                currentComments[i] = comment.value;\n                comment.addEventListener('blur', function(e) {\n                    // Update it IF it changed with the external function Ajax call.\n                    if (currentComments[i] === e.target.value) {\n                        Y.log('not going to update server, nothing changed. Current comment value: ' + e.target.value);\n                    } else {\n                        Y.log('Sending this student comment to server');\n                        let classString = e.target.classList[0]; // studentcommentid13\n                        // Get the item id from the end of the first class name, eg. studentcommentid13\n                        let checklistitemid = classString.substr(classString.lastIndexOf(classPrefix) + classPrefix.length);\n\n                        let spinner = '#checklistspinnerstudentcomment' + checklistitemid;\n                        $(spinner).css('display', 'inline-block');\n\n                        let args = {\n                              'comment': {\n                                  'commenttext': e.target.value,\n                                  'checklistitemid': checklistitemid,\n                                  'cmid': cmid,\n                              }\n                        };\n\n                        let request = {\n                            methodname: 'mod_checklist_update_student_comment',\n                            args: args,\n                        };\n                        Ajax.call([request])[0].done(function(data) {\n                            $(spinner).css('display', 'none');\n                            if (data === true) {\n                                Y.log('updated comment successfully.');\n                                currentComments[i] = e.target.value;\n                            } else {\n                                Notification.addNotification({\n                                    message: String.get_string('update_student_comment_failed', 'mod_checklist'),\n                                    type: 'error',\n                                });\n                            }\n                        }).fail(Notification.exception);\n                    }\n                });\n            }\n        }\n    };\n});\n"],"file":"student_comment.min.js"}